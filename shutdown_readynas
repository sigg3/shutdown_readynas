#! /usr/bin/env python3
# coding=utf-8
# shutdown_readynas: Utility for shutting down a running
# Netgear ReadyNAS using selenium browser automation.
#
# Copyright (C) 2021 Sigbj√∏rn "sigg3" Smelror <git@sigg3.net>.
#
# shutdown_readynas is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, version 3 of the License.
#
# shutdown_readynas is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the GNU General Public License for more details.
# URL: <https://www.gnu.org/licenses/old-licenses/gpl-3.0.txt>
#
# Submit issues at: <https://github.com/sigg3/shutdown_readynas>

# TODO
# test that we are reading a live system (check headers)

import sys
from socket import inet_aton
from time import sleep
from selenium import webdriver

print("Shut down running Netgear ReadyNAS through browser automation.")
usage = f"Usage: {sys.argv[0]} IP PASSWORD"

# Check arg num
if len(sys.argv) != 3:
    print(usage) ; quit()
else:
    nas_app, nas_ip, nas_pass = sys.argv

# test ip
try:
    inet_aton(nas_ip)
except:
    print(usage) ; quit()

print(f"Sending HTTPS shutdown to ReadyNAS @ {nas_ip}")

# setup browser and URL
is_headless = webdriver.firefox.options.Options()
is_headless.headless = True
browser = webdriver.Firefox(options=is_headless)
nas_url = f"https://admin:{nas_pass}@{nas_ip}/admin"

# open and accept tls err
try:
    browser.get(nas_url)
except:
    try:
        browser.get(nas_url)
    except:
        pass
finally:
    enable_tls1 = browser.find_element_by_id("enableTls10Button")
    enable_tls1.click()

browser.get(nas_url)
sleep(1)

# check menu mode
mode_toggle = browser.find_element_by_id("BUTTON_MODE")
mode_set = mode_toggle.get_attribute("value")

if mode_set == "Switch to Advanced Control":
    mode_toggle.click()

# click menu item "System"
menu = browser.find_elements_by_css_selector("html body div#frontview_wrapper div table.tableStyle tbody tr td.topAlign table.tableStyle tbody tr#MenuBar-Advanced td.padding2Top.topAlign table#Tree.thardNavContainer tbody tr td.topAlign div table.tableStyle tbody tr td div#my_menu.sdmenu div.collapsed span")
menu[7].click()

# click submenu item "Shutdown"
menu_shutdown = browser.find_element_by_id("LABEL_MENU_SYSTEM_SHUTDOWN")
menu_shutdown.click()
select_shutdown = browser.find_element_by_id("shutdown_option1")
select_shutdown.click()
apply_shutdown = browser.find_element_by_id("BUTTON_APPLY")
apply_shutdown.click()
sleep(1)
try:
    browser.close()
except:
    pass

print("Done.")
quit()
